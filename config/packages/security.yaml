security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # Activer l'authentification par formulaire
            form_login:
                login_path: app_login    # La route vers la page de connexion
                check_path: app_login    # La route où Symfony vérifie les identifiants
                default_target_path: home  # Redirige l'utilisateur vers cette route après une connexion réussie
                enable_csrf: true  # Active la protection CSRF pour le formulaire de connexion

            # Activer la déconnexion
            logout:
                path: app_logout  # La route pour la déconnexion
                target: home  # Redirige l'utilisateur vers cette route après la déconnexion

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }  # Autorise l'accès à /login sans authentification
        - { path: ^/annonce, roles: PUBLIC_ACCESS }  # Autorise l'accès à /login sans authentification
        - { path: ^/register, roles: PUBLIC_ACCESS }  # Autorise l'accès à /register sans authentification
        - { path: ^/$, roles: PUBLIC_ACCESS }  # Autorise l'accès à la page d'accueil (/) sans authentification
        - { path: ^/about, roles: PUBLIC_ACCESS }  # Autorise l'accès à /about sans authentification
        - { path: ^/, roles: ROLE_USER }  # Toutes les autres routes nécessitent une authentification
        # Ajouter d'autres contrôles d'accès si nécessaire (ex: admin)


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
